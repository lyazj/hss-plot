cmake_minimum_required(VERSION 3.13)
project(hss-plot VERSION 0.0.1)

include_directories(${PROJECT_SOURCE_DIR}/include)
link_directories(${PROJECT_SOURCE_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# https://cliutils.gitlab.io/modern-cmake/chapters/packages/ROOT.html
find_package(ROOT)
include("${ROOT_USE_FILE}")
string(REPLACE "-L " "-L" ROOT_EXE_LINKER_FLAGS "${ROOT_EXE_LINKER_FLAGS}")
separate_arguments(ROOT_EXE_LINKER_FLAGS)

if(CMSSW_RLSE)
    include_directories(/cvmfs/cms.cern.ch/slc7_amd64_gcc700/cms/cmssw/${CMSSW_RLSE}/src)
    link_directories(/cvmfs/cms.cern.ch/slc7_amd64_gcc700/cms/cmssw/${CMSSW_RLSE}/lib/slc7_amd64_gcc700)
    if(NOT FWLITE_LIBRARIES)
        set(FWLITE_LIBRARIES FWCoreFWLite DataFormatsFWLite)
    endif()
    add_compile_definitions(CMSSW_RLSE=${CMSSW_RLSE})
endif()

option(ENABLE_SANITIZER "compile and link with sanitizing flags" OFF)
option(ENABLE_GPROF "compile and link with gprof flags" OFF)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE DEBUG)
endif()
if(CMAKE_BUILD_TYPE STREQUAL DEBUG)
    add_compile_options(-O0 -fno-omit-frame-pointer)
    if(ENABLE_SANITIZER)
        set(SANITIZER_OPTIONS -fno-sanitize-recover=all)
        list(APPEND SANITIZER_OPTIONS -fsanitize=address)
        list(APPEND SANITIZER_OPTIONS -fsanitize=leak)
        list(APPEND SANITIZER_OPTIONS -fsanitize=undefined)
        list(APPEND SANITIZER_OPTIONS -fsanitize=float-divide-by-zero)
        add_compile_options(${SANITIZER_OPTIONS})
        add_link_options(${SANITIZER_OPTIONS})
    endif()
else()
    add_compile_options(-O3)
endif()
if(ENABLE_GPROF)
    set(GPROF_OPTIONS -pg)
    add_compile_options(${GPROF_OPTIONS})
    add_link_options(${GPROF_OPTIONS})
endif()
add_compile_options(-Wall -Wshadow -Wextra)
add_compile_definitions(_GNU_SOURCE)

file(GLOB SOURCE_FILES src/plot/*.cpp)
add_library(plot SHARED ${SOURCE_FILES})
target_link_libraries(plot PUBLIC ${ROOT_LIBRARIES} ASImage)
target_link_libraries(plot INTERFACE ${ROOT_EXE_LINKER_FLAGS})

file(GLOB SOURCE_FILES src/macro/*.cpp src/example/*.cpp)
foreach(SOURCE_FILE ${SOURCE_FILES})
    string(REGEX REPLACE "\.cpp$" "" EXECUTABLE_FILE ${SOURCE_FILE})
    string(REGEX REPLACE ".*/" "" EXECUTABLE_NAME ${EXECUTABLE_FILE})
    add_executable(${EXECUTABLE_NAME} ${SOURCE_FILE})
    target_link_libraries(${EXECUTABLE_NAME} PUBLIC plot)
endforeach()
